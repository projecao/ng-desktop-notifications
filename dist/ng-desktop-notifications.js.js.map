{"version":3,"file":null,"sources":["../src/providers/notification.provider.js","../src/ng-desktop-notifications.js"],"sourcesContent":["import angular from 'angular'\r\n\r\nfunction NotificationProvider () {\r\n\r\n    // Defaults config\r\n    this.defaultConfig = {}\r\n\r\n    // Requite keys\r\n    this.requiredKeys = []\r\n\r\n    /**\r\n     * Sanitize configuration parameters\r\n     * \r\n     * @param {object} an `object` of params to sanitize\r\n     * @return {object} an sanitize version of the params\r\n     */\r\n    const sanitizeConfigParams = (params) => {\r\n        if (!(params instanceof Object)) {\r\n            throw new TypeError('Invalid argument: `config` must be an `Object`.')\r\n        }\r\n\r\n        // Extend default configuration.\r\n        const config = angular.extend({}, this.defaultConfig, params)\r\n\r\n        // Check if all required keys are set.\r\n        this.requiredKeys.forEach((key) => {\r\n            if (!config[key]) {\r\n                throw new Error(`Missing parameter: ${key}.`)\r\n            }\r\n        })\r\n\r\n        return config\r\n    }\r\n\r\n    /**\r\n     * Configure\r\n     * \r\n     * @param {object} params - An `object` of params to extend.\r\n     */\r\n    this.configure = (params) => {\r\n        this.defaultConfig = sanitizeConfigParams(params)\r\n    }\r\n\r\n    /**\r\n     * The provider\r\n     */\r\n    this.$get = function($window, $rootScope, $q){\r\n\r\n        class Notification \r\n        {\r\n            constructor(config)\r\n            {   \r\n                this.config = config\r\n\r\n                this.isSupported = !!$window.Notification\r\n            }\r\n\r\n            show(title, options){\r\n\r\n                if (!$window.Notification) return false;\r\n\r\n                this.title = title;\r\n                this.options = options;\r\n\r\n                // Events cache.\r\n                this._events = [];\r\n\r\n                if ($window.Notification.permission === 'granted') {\r\n                    return this.createNotification();\r\n                } else if ($window.Notification.permission !== 'denied') {\r\n                    this.requestPermission().then(createNotification);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Create the notification.\r\n             */\r\n            createNotification()\r\n            {\r\n                // Extend options with default provider options.\r\n                this.options = angular.extend({\r\n                    focusWindowOnClick: true\r\n                }, this.config || {}, this.options);\r\n\r\n                // Create a base notification.\r\n                try {\r\n                    this.baseNotification = new $window.Notification(this.title, this.options);\r\n                } catch (error) {\r\n                    return;\r\n                }\r\n\r\n                // Close notification after specified delay.\r\n                if (this.options.delay) setTimeout(angular.bind(this, this.close), this.options.delay);\r\n\r\n                // Focus window on click.\r\n                if (this.options.focusWindowOnClick) this.$on('click', e => $window.focus() )\r\n\r\n                // Re-bind events.\r\n                this._events.forEach((args) => {\r\n                    this.$on(...args);\r\n                });\r\n\r\n                // Reset events.\r\n                this._events = [];\r\n            }\r\n\r\n            requestPermission()\r\n            {\r\n                return $q(function (resolve, reject) \r\n                {\r\n                    if (!$window.Notification) return reject();\r\n\r\n                    $window.Notification.requestPermission(function (permission) {\r\n                        // Persist permission.\r\n                        $window.Notification.permission = $window.Notification.permission || permission;\r\n                        resolve($window.Notification.permission);\r\n                    });\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Close the notification.\r\n             */\r\n            close()\r\n            {\r\n                if (this.baseNotification) this.baseNotification.close();\r\n            }\r\n\r\n            /**\r\n             * Listen on event of a given type.\r\n             * Supported events are:\r\n             * \r\n             * - error\r\n             * - show\r\n             * - click\r\n             * - close\r\n             *\r\n             * @param {String} name\r\n             * @param {Function} listener\r\n             */\r\n            $on(name, listener)\r\n            {\r\n                // If the notification is not ready, we cache the event.\r\n                if (!this.baseNotification) return this._events.push([name, listener]);\r\n\r\n                this.baseNotification.addEventListener(name, applyListener);\r\n\r\n                function applyListener(...args) {\r\n                    $rootScope.$apply(function () {\r\n                        listener(...args);\r\n                    });\r\n                }\r\n\r\n                // Return the deregistration function.\r\n                return function $off() {\r\n                    this.baseNotification.removeListener(event, applyListener);\r\n                };\r\n            }\r\n\r\n        }\r\n\r\n        return new Notification(this.defaultConfig)\r\n\r\n    }\r\n\r\n    this.$get.$inject = ['$window', '$rootScope', '$q']\r\n}\r\n\r\n\r\n/**\r\n * Export NotificationProvider\r\n */\r\nexport default NotificationProvider","/**\r\n * Dependencies.\r\n */\r\nimport angular from 'angular'\r\nimport desktopNotificationProvider from './providers/notification.provider'\r\n\r\nvar ngModule = angular\r\n    .module('ngDesktopNotifications', [])\r\n    .provider('desktopNotification', desktopNotificationProvider)\r\n    .name\r\n\r\n/**\r\n * Export `ngDesktopNotifications`.\r\n */\r\nexport default ngModule"],"names":["NotificationProvider","defaultConfig","requiredKeys","sanitizeConfigParams","params","Object","TypeError","config","angular","extend","forEach","key","Error","configure","$get","$window","$rootScope","$q","Notification","isSupported","title","options","_events","permission","createNotification","requestPermission","then","baseNotification","error","delay","setTimeout","bind","close","focusWindowOnClick","$on","focus","args","resolve","reject","name","listener","push","addEventListener","applyListener","$apply","$off","removeListener","event","$inject","ngModule","module","provider","desktopNotificationProvider"],"mappings":"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"}
